# 方法一：二分查找

我们将所有已经预定的区间进行排序，然后找到一个区间`last[left1,right1]`,使得`left1`大于等于要预定的区间`end`,分以下几种情况
- 未找到，即没有比`end`大的区间，那么我们和最后一个区间比较`right1`是否小于等于`start`，是返回`true`，否则返回`false`
  ![image.png](https://pic.leetcode-cn.com/1656979691-xoiwLk-image.png)
- 是第一个区间，直接插入
  ![image.png](https://pic.leetcode-cn.com/1656979735-rWTMZT-image.png)
- 中间区间，我们找到`last[left1,right1]`的上一个区间`pre[left2,right2]`,若`right2`大于`start`，证明有交集，返回`false`，否则返回`true`
  ![image.png](https://pic.leetcode-cn.com/1656979833-yzhsuD-image.png)
  **代码如下**

* 

```
    List<int[]> data;

    public MyCalendar() {
        data = new ArrayList<>();
    }

    public boolean book(int start, int end) {
        if (data.size() == 0) {
            data.add(new int[]{start, end});
            return true;
        }
        data.sort(Comparator.comparingInt(o -> o[0]));
        int left = 0, right = data.size() - 1;
        //找到第一个start >= end的区间
        int ans = -1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (data.get(mid)[0] >= end) {
                ans = mid;
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        //没有找到 和最后一个区间比较
        if (ans == -1) {
            int[] ints = data.get(data.size() - 1);
            if (ints[1] > start) {
                return false;
            }
        } else if (ans != 0) {
            //不是第一个区间，如果是第一个区间则可以直接插入
            int[] pre = data.get(ans - 1);
            if (pre[1] > start) {
                return false;
            }
        }
        data.add(new int[]{start, end});
        return true;
    }
```

上述代码是自己实现的二分和排序，我们也可以采用有序的TreeSet来实现，详见官方题解

# 方法二：二分搜索树

我们可以利用二分搜索树的性质，将第一个book区间看作root，然后每次book都看作插入一个结点，`end`大于等于`right`的插入右子树，`start`小于等于`left`的插入左子树，否则无法插入，返回false。
**代码如下**

* 

```
    class TreeNode {
        private TreeNode left;
        private TreeNode right;
        private int start;
        private int end;

        public TreeNode(int start, int end) {
            this.start = start;
            this.end = end;
        }
    }

    TreeNode root;

    public MyCalendar() {

    }

    public boolean book(int start, int end) {
        if (root == null) {
            root = new TreeNode(start, end);
            return true;
        }
        TreeNode cur = root;
        while (true) {
            //在树的左侧
            if (end <= cur.start) {
                if (cur.left == null) {
                    cur.left = new TreeNode(start, end);
                    return true;
                }
                cur = cur.left;
            } else if (start >= cur.end) {
                //在树的右侧
                if (cur.right == null) {
                    cur.right = new TreeNode(start, end);
                    return true;
                }
                cur = cur.right;
            } else {
                //包含返回false
                return false;
            }
        }
    }

```

**复杂度分析**
时间复杂度：O(nlogn),预定n次，每次找位置需要O(logn)
空间复杂度：O(n)
![image.png](https://pic.leetcode-cn.com/1656980815-inOpbs-image.png)

# 方法三：线段树

我们直接维护一个线段树，book时查询区间是否有值，有返回false，没有返回ture。
线段树直接套模板，[线段树详解](https://leetcode.cn/problems/range-module/solution/by-jiang-hui-4-tu5a/)
**代码如下**

* 

```
    /**
     * 线段树的结点
     */
    static class Node {
        //左范围
        private int left;
        //右范围
        private int right;
        //区间和
        private int value;
        //懒标记
        private int lazy;
        //左子树和右子树
        Node leftChild, rightChild;

        public Node(int leftX, int rightX) {
            this.left = leftX;
            this.right = rightX;
        }
    }

    private Node root;


    /**
     * 区间更新
     *
     * @param root  树的根
     * @param left  左边界
     * @param right 有边界
     * @param value 更新值
     */
    public void update(Node root, int left, int right, int value) {
        //不在范围内 直接返回
        if (root.left > right || root.right < left) {
            return;
        }
        //修改的区间包含当前结点
        if (root.left >= left && root.right <= right) {
            root.lazy = value;
            root.value = (root.right - root.left + 1) * value;
        } else {
            //动态开点
            lazyCreate(root);
            //下传lazy
            pushDown(root);
            //更新左子树
            update(root.leftChild, left, right, value);
            //更新右子树
            update(root.rightChild, left, right, value);
            //上传结果
            pushUp(root);
        }
    }

    public int query(Node root, int left, int right) {
        if (left <= root.left && root.right <= right) {
            return root.value;
        }
        lazyCreate(root);
        pushDown(root);
        int mid = root.left + (root.right - root.left) / 2;
        if (right <= mid) {
            return query(root.leftChild, left, right);
        } else if (left > mid) {
            return query(root.rightChild, left, right);
        } else {
            return query(root.leftChild, left, mid) + query(root.rightChild, mid + 1, right);
        }
    }

    /**
     * 创建左右子树
     *
     * @param root
     */
    public void lazyCreate(Node root) {
        if (root.leftChild == null) {
            root.leftChild = new Node(root.left, root.left + (root.right - root.left) / 2);
        }
        if (root.rightChild == null) {
            root.rightChild = new Node(root.left + (root.right - root.left) / 2 + 1, root.right);
        }
    }

    /**
     * 下传lazy
     *
     * @param root
     */
    public void pushDown(Node root) {
        if (root.lazy == 0) {
            return;
        }
        int value = root.lazy;
        root.leftChild.lazy = value;
        root.rightChild.lazy = value;
        root.leftChild.value += (root.leftChild.right - root.leftChild.left + 1) * value;
        root.rightChild.value += (root.rightChild.right - root.rightChild.left + 1) * value;
        root.lazy = 0;
    }

    /**
     * 上传结果
     *
     * @param root
     */
    public void pushUp(Node root) {
        root.value = root.leftChild.value + root.rightChild.value;
    }

    public MyCalendar() {
        root = new Node(0, (int) 1e9);
    }

    public boolean book(int start, int end) {
        int query = query(root, start, end - 1);
        if (query > 0) {
            return false;
        }
        update(root, start, end - 1, 1);
        return true;
    }
```

**复杂度分析**
时间复杂度：O(nlogc)
空间复杂度：O(nlogc)
如果对您有帮助，**记得关注 + 点赞 + 收藏呦！！！**
**每天都会更新每日一题题解，大家加油！！！**
