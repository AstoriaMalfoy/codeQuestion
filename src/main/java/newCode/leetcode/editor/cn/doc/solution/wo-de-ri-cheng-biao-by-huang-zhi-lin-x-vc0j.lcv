### 解题思路

解题思路：
这很明显的二分题，调用次数也不多，二分的时间复杂度还是可以的。
我们二分要么搜索已经 book 的时间范围，要么搜索没有 book 的时间范围。我这里选择的是后者。
1. 初始化一个存储可 book 的时间片段数组集合。默认是[0 - (int)1e9], 也就是初始集合长度是 1；
2. 那么，接下来调用 book 时，我们就可以直接二分搜索该集合，如果有满足的时间片段，我们就可以对集合做进一步处理；
3. 对于可 book 的时间片段，需要对其移除，然后将剩下的合法片段在放回到集合中，这里注意在放回去时要保证集合的顺序

### 代码

* java

```java
class MyCalendar {

    List<int[]> calendars;
    public MyCalendar() {
        this.calendars = new ArrayList<>();
        calendars.add(new int[] {0, (int)1e9});
    }
    
    public boolean book(int start, int end) {
        int idx = BS(start, end);
        if (idx != -1) {
            int[] ele = calendars.get(idx);
            calendars.remove(idx);
            if (start == ele[0] && end == ele[1]) {
                return true;
            } else if (end == ele[1]) {
                calendars.add(idx, new int[] {ele[0], start});
            } else if (start == ele[0]) {
                calendars.add(idx, new int[] {end, ele[1]});
            } else {
                calendars.add(idx, new int[] {end, ele[1]});
                calendars.add(idx, new int[] {ele[0], start});
            }
            return true;
        }
        return false;
    }

    int BS(int start, int end) {
        int left = 0, right = calendars.size() - 1;
        while (left <= right) {
            int mid = left + right >> 1;
            int[] source = calendars.get(mid);
            if (start >= source[0] && end <= source[1]) {
                return mid;
            } else if (end < source[0]) {
                right = mid - 1;
            } else {
                left = mid + 1; 
            }
        }
        return -1;
    }
}

/**
 * Your MyCalendar object will be instantiated and called as such:
 * MyCalendar obj = new MyCalendar();
 * boolean param_1 = obj.book(start,end);
 */
```

